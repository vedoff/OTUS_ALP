
services:
## ================== Разворачиваем базу данных для проекта ================

  # database:
  #   image: mysql:8.0
  #   container_name: database
  #   restart: unless-stopped
  #   environment:
  #     MYSQL_DATABASE: ${DB_NAME}
  #     MYSQL_ROOT_PASSWORD: ${DB_ROOT_PASSWORD}
  #   volumes:
  #     - "./dbdata:/var/lib/mysql"
  #   command: '--default-authentication-plugin=mysql_native_password'
  #   env_file:
  #   - "./.env"
  #   networks:
  #     - app-network

## ==================== Разворачиваем Контейнер wordpress ==================

  wordpress:
    image: wordpress:5.1.1-fpm-alpine # официальный образ от разработчиков
    container_name: wordpress
    restart: unless-stopped
# на странице образа в docker hub написано, какие можно задать переменные контейнеру https://hub.docker.com/_/wordpress
    environment:
      WORDPRESS_DB_HOST: "${DB_HOST}"
      WORDPRESS_DB_NAME: "${DB_NAME}" # Также импортируем переменные из .env
      WORDPRESS_DB_USER: wordpress
      WORDPRESS_DB_PASSWORD: "${DB_ROOT_PASSWORD}"
    volumes:
      - ./wordpress:/var/www/html # сохраняем приложение на хост машине
      - ./wordpress/pg4wp:/var/www/html/wp-content/pg4wp
      - ./wordpress/pg4wp/db.php:/var/www/html/wp-content/db.php
    env_file:
      - "./.env"
    networks:
      - app-network
    # depends_on:
    #   - database # контейнер wordpress дождется запуска БД


## ======================== Flask python приложение ==========================================

  # app:
  #   build: ./python/app # для нашего приложения нужны зависимости, поэтому собираем свой образ
  #   container_name: app
  #   restart: always
  #   networks:
  #     - app-network

## ========================== Котейнер  Node js приложения
  # node:
  #   image: node:16.13.2-alpine3.15
  #   container_name: node
  #   working_dir: /opt/server # переназначим рабочую директорию для удобства
  #   volumes:
  #     - ./node:/opt/server # пробрасываем приложение в директорию контейнера
  #   command: node test.js # запуск приложения
  #   networks:
  #     - app-network

## ======================= Разворачиваем контейнер nginx =================================
  nginx:
    image: nginx:1.15.12-alpine
    container_name: nginx
    restart: unless-stopped
# Т.к. все запросы к приложениям будут проходить через nginx, пробросим под каждое приложение по порту.
    ports:
      - 8080:8080
      # - 8081:8081
      # - 8082:8082
    volumes:
  # будет использоваться php-fpm, необходимо смонтировать статические файлы wordpress :
      - ./wordpress:/var/www/html
      - ./nginx-conf:/etc/nginx/conf.d # монтируем конфиг 
    networks:
      - app-network
    depends_on: # nginx будет запускаться после всех приложений
      - wordpress
      # - app
      # - node
    #Связывает app с nginx, Docker добавляет запись хоста для app в /etc/hosts nginx- контейнера
    # links:
    #   - app

## ============== Настройка сети для контейнеров ================================

networks:
  app-network:
    driver: bridge